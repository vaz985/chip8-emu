#ifndef _chip8
#define _chip8
#include <iostream>
#include <fstream>
#include <random>
#include <string>

class chip8 {
	public:
		void initialize();
		void emulateCycle();
	private:
		// RNG
		std::mt19937 rng;
		////
		std::string rom_name;
		std::ifstream rom;
		void insert_rom();
		//0x000-0x1FF - Chip 8 interpreter (contains font set in emu)
		//0x050-0x0A0 - Used for the built in 4x5 pixel font set (0-F)
		//0x200-0xFFF - Program ROM and work RAM
		unsigned short opcode;
		unsigned char memory[4096];
		// CPU registers
		unsigned char V[16];
		// Index register I and PC
		unsigned short I;
		unsigned short pc;
		// Graph, black or white pixel
		unsigned char gfx[64 * 32];
		// Interrupts and hardware registers
		unsigned char delay_timer;
		unsigned char sound_timer;
		// Stack for remembering current loc before jump
		unsigned char stack[16];
		unsigned char sp;
		// Keypad
		unsigned char key[16];

		unsigned char chip8_fontset[80] = {
			0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
			0x20, 0x60, 0x20, 0x20, 0x70, // 1
			0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
			0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
			0x90, 0x90, 0xF0, 0x10, 0x10, // 4
			0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
			0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
			0xF0, 0x10, 0x20, 0x40, 0x40, // 7
			0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
			0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
			0xF0, 0x90, 0xF0, 0x90, 0x90, // A
			0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
			0xF0, 0x80, 0x80, 0x80, 0xF0, // C
			0xE0, 0x90, 0x90, 0x90, 0xE0, // D
			0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
			0xF0, 0x80, 0xF0, 0x80, 0x80  // F
		};

		void fetch();

};
#endif
